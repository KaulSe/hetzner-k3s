name: Build ARM & X86 Release

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
        
jobs:
  build_release_arm:
    name: Build ARM & X86 Release
    strategy:
      matrix:
        os: [Linux]
        include:
          - os: linux
            release_suffix: linux-arm64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run linux Build ARM
        if: matrix.os == 'Linux'
        run: |
          docker run -d --name alpine -v $(pwd):/workspace -w /workspace crystallang/crystal:latest-alpine tail -f /dev/null
          docker exec alpine apk add libssh2 libssh2-dev libssh2-static libxml2-dev libxml2-static xz-static
          docker exec alpine shards install --without-development
          docker exec alpine crystal build src/hetzner-k3s.cr --release --static
          cp hetzner-k3s hetzner-k3s-${{ matrix.release_suffix }}
          gh release create ${{ env.VERSION }} -n "${{ env.MESSAGE }}" -t "${{ env.NAME }}" || true
          gh release upload ${{ env.VERSION }} ${{ env.FILES }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ github.ref_name }}
          MESSAGE: "WIP"
          NAME: ${{ github.ref_name }}
          FILES: hetzner-k3s-${{ matrix.release_suffix }}
